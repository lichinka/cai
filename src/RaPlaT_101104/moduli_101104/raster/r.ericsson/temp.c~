

/****************************************************************************
 *
 * MODULE:       r.ericsson
 * AUTHOR(S):    Andrej Vilhar, Andrej Hrovat, Jozef Stefan Institute                
 *
 * PURPOSE:      Calculates radio coverage from a single base station 
 *               according to Ericsson model
 *             
 *
 * COPYRIGHT:    (C) 2009 Jozef Stefan Institute
 *
 *
 *****************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <grass/gis.h>
#include <grass/glocale.h>
#include <math.h>


#include "local_proto.h"

#define phi 3.14
/* #define MAIN */


/* 
 * global function declaration 
 */
extern FCELL ericsson(FCELL);


/*
 * Calculation of Ericsson for a pair of points:
 * -----------------------------------------
 * x ... elevation of current point
 * y ... LOS data
 * tr_east, tr_north ... transmitter coordinates
 * tr_height ... total height = transmitter elevation + height of antenna
 * rec_col, rec_row ... the column and row of the receiving point
 * freq ... radio frequency
 * window ... database window
 */
FCELL calc_ericsson(FCELL x, FCELL y, double tr_east, double tr_north, double tr_height, int rec_col, int rec_row, double freq, struct Cell_head window, char *name, int infd, FILE *fp)
{ 
  double rec_east, rec_north;  /* receiver coordinates */
  double rec_height = 1.5; /* height of receiver from the ground */
  
  double d;    /* Distance between transmitter and receiver */
  double tr_height_eff; /* effective height of Tx: (absolute) difference between total Tx and total Rx height */

  double Lhata; /* Path loss Hata part in Ericsson model*/


  /* from r.profile */
	RASTER_MAP_TYPE data_type;
	int coords = 1;
	double res;
	char *null_string = "0";
	
	/* double f_Koef;  Fresnel diffraction parameter*/ 
  	/* double alpha */
 	/* double f_height */
 	/* double f_dist1 */
 	/* double f_dist2 */
  
  
  /* Calculate only where LOS */
  if (G_is_f_null_value(&y))
    return y;
    
  /* Calculate receiver coordinates */
  rec_east = window.west + (rec_col * window.ew_res);
  rec_north = window.north - (rec_row * window.ns_res);

  /* Calculate effective height */
  tr_height_eff = fabs(tr_height - (double)x - rec_height);

	/*G_message(_("tr_height=%f"),tr_height);*/
	/*G_message(_("tr_height_eff=%f"),tr_height_eff);*/

  /* If effective Tx height is out of Hata model requested boundaries, then do not calculate */
  if (tr_height_eff > 20000 || tr_height_eff < 1)
    {
      
      G_set_f_null_value(&x, 1);
      return x;
    }
    
  /* Distance between Tx and Rx */
  d = sqrt( pow((tr_east - rec_east),2) + pow((tr_north - rec_north),2) );
  d = d/1000;  /* distance has to be given in km */

  /* If effective Rx and Tx are closer than 100m, then do not calculate */
  if (d < 0.1)
    {
      
      G_set_f_null_value(&x, 1);
      return x;
    }

  /* do_profile function   */

			

	res = (window.ew_res + window.ns_res) / 2;
  	data_type = G_get_raster_map_type(infd);


	do_profile(tr_east, rec_east, tr_north, rec_north, name, coords, res, infd, data_type, fp, null_string);


 
  /* f_Koef = f_height*sqrt(2*(f_dist1+f_dist2)/((3*pow(10,8)/freq)*f_dist1*f_dist2))  */

G_message(_("Test point do_profile"));
  
  Lhata= 42 + 42*log10(d)- 12*log10(tr_height_eff) + 0.1*log10(d)*log10(tr_height_eff) - 3.2*pow(log10(11.75*rec_height),2) 		+ 44.9*log10(freq) - 4.78*pow(log10(freq),2);  /* - alpha*20*log10(1/(phi*f_Koef*sqrt(2)))  */

  /*if (Lo > 1000000) for debuging */
   /*G_message(_("Lhata=%f"),Lhata);*/
  
  /* return x */
  x=(FCELL)Lhata;  
  
  return x;
}


/*
 * main function
 */
int main(int argc, char *argv[])
{
    double east;
    double north;
    double ant_height, frequency;
    
    struct Cell_head window;	/*      database window         */
    struct Cell_head cellhd;	/* it stores region information,
				   and header information of rasters */
    char *name, *name2, *outfile;			/* input raster name */
    char *result;		/* output raster name */
    char *mapset, *mapset2;		/* mapset name */
    void *inrast, *inrast2;		/* input buffer */
    unsigned char *outrast;	/* output buffer */
    int nrows, ncols;
    int row, col;
    int tr_row, tr_col;
    int infd, infd2, outfd;		/* file descriptor */
    int verbose;
    struct History history;	/* holds meta-data (title, comments,..) */

    struct GModule *module;	/* GRASS module for parsing arguments */

    struct Option *input, *input2, *opt1, *opt2, *opt3, *output, *output1;	/* options */
    struct Flag *flag1;		/* flags */

    FILE *fp;

    /* initialize GIS environment */
    G_gisinit(argv[0]);		/* reads grass env, stores program name to G_program_name() */

    /* initialize module */
    module = G_define_module();
    module->keywords = _("raster, ericsson");
    module->description = _("Ericsson module");

    /* Define the different options as defined in gis.h */
    input = G_define_standard_option(G_OPT_R_INPUT);
    output = G_define_standard_option(G_OPT_R_OUTPUT);

    input2 = G_define_standard_option(G_OPT_R_INPUT);
    input2->key = "LOS_map";
    input2->required = NO;
    input2->description = _("LOS raster map to use as a mask");


    output1 = G_define_option();
    output1->key = "output1";
    output1->type = TYPE_STRING;
    output1->required = NO;
    output1->answer = "-";
    output1->gisprompt = "new_file,file,output";
    output1->description =
	_("Name of file for output (use output=- for stdout)");

    /* Define the different flags */
    flag1 = G_define_flag();
    flag1->key = 'q';
    flag1->description = _("Quiet");

    opt1 = G_define_option();
    opt1->key = "coordinate";
    opt1->type = TYPE_STRING;
    opt1->required = YES;
    opt1->key_desc = "x,y";
    opt1->description = _("Base station coordinates");

    opt2 = G_define_option();
    opt2->key = "ant_height";
    opt2->type = TYPE_DOUBLE;
    opt2->required = NO;
    opt2->answer = "10";
    opt2->description = _("Height of the anntenas");

    opt3 = G_define_option();
    opt3->key = "frequency";
    opt3->type = TYPE_DOUBLE;
    opt3->required = YES;
    opt3->description = _("Frequency (MHz)");


    /* options and flags parser */
    if (G_parser(argc, argv))
	exit(EXIT_FAILURE);

    /* stores options and flags to variables */
    name = input->answer;
    name2 = input2->answer;
    result = output->answer;
    verbose = (!flag1->answer);
    G_scan_easting(opt1->answers[0], &east, G_projection());  /* Tx coordinate */
    G_scan_northing(opt1->answers[1], &north, G_projection()); /* Tx coordinate */
    sscanf(opt2->answer, "%lf", &ant_height);
    sscanf(opt3->answer, "%lf", &frequency);

    G_get_window(&window);

    /* check if specified transmitter location inside window   */
    if (east < window.west || east > window.east
	|| north > window.north || north < window.south)
	G_fatal_error(_("Specified base station  coordinates are outside current region bounds."));
    

    /* returns NULL if the map was not found in any mapset, 
     * mapset name otherwise */
    mapset = G_find_cell2(name, "");
    if (mapset == NULL)
	G_fatal_error(_("Raster map <%s> not found"), name);

    mapset2 = G_find_cell2(name2, "");
    if (mapset2 == NULL)
	G_fatal_error(_("Raster map <%s> not found"), name2);

    if (G_legal_filename(result) < 0)
	G_fatal_error(_("<%s> is an illegal file name"), result);


    /* G_open_cell_old - returns file destriptor (>0) */
    if ((infd = G_open_cell_old(name, mapset)) < 0)
	G_fatal_error(_("Unable to open raster map <%s>"), name);

    if ((infd2 = G_open_cell_old(name2, mapset2)) < 0)
	G_fatal_error(_("Unable to open raster map <%s>"), name2);

G_message(_("Test point 1"));

   /* Open ASCII file for output or stdout */
    outfile = output1->answer;

    if ((strcmp("-", outfile)) == 0) {
	fp = stdout;
    }
    else if (NULL == (fp = fopen(outfile, "w")))
	G_fatal_error(_("Unable to open file <%s>"), outfile);


    /* controlling, if we can open input raster */
    if (G_get_cellhd(name, mapset, &cellhd) < 0)
	G_fatal_error(_("Unable to read file header of <%s>"), name);

    if (G_get_cellhd(name2, mapset2, &cellhd) < 0)
	G_fatal_error(_("Unable to read file header of <%s>"), name2);

    G_debug(3, "number of rows %d", cellhd.rows);

 

    /* Allocate input buffer */
    inrast = G_allocate_raster_buf(FCELL_TYPE);
    inrast2 = G_allocate_raster_buf(FCELL_TYPE);

    /* Allocate output buffer, use input map data_type */
    nrows = G_window_rows();
    ncols = G_window_cols();
    outrast = G_allocate_raster_buf(FCELL_TYPE);

	
    /* controlling, if we can write the raster */
    if ((outfd = G_open_raster_new(result, FCELL_TYPE)) < 0)
	G_fatal_error(_("Unable to create raster map <%s>"), result);

    /* map array coordinates for transmitter */
    tr_row = (window.north - north) / window.ns_res;
    tr_col = (east - window.west) / window.ew_res;

    /* total height of transmitter */
    FCELL trans_elev;
    double trans_total_height;
    if (G_get_raster_row(infd, inrast, tr_row, FCELL_TYPE) < 0)
      G_fatal_error(_("Unable to read raster map <%s> row %d"), name, tr_row);
    
      trans_elev = ((FCELL *) inrast)[tr_col];

	/*G_message(_("tr_row=%f"),tr_row);*/
	/*G_message(_("tr_col "),tr_col) ;*/
	/*G_message(_("trans_elev=%f"),(double)trans_elev);*/
	/*G_message(_("ant_height=%f"),ant_height);*/

    trans_total_height = (double)trans_elev + ant_height;

	/*G_message(_("trans_total_height=%f"),trans_total_height);*/


    	/*G_message(_("trans_total_height: %f, trans_elev: %f"), trans_total_height, (double)trans_elev);*/


    /* Determine the minimum elevation point 
     *(the value will later be subtracted from every point in the map)
     */

    /*
    double min_elev = 99999999;
    FCELL f;
    for (row = 0; row < nrows; row++) {

	if (verbose)
	    G_percent(row, 2*nrows, 2);
    */
	/* read input map */
    /*
	if (G_get_raster_row(infd, inrast, row, FCELL_TYPE) < 0)
	  G_fatal_error(_("Unable to read raster map <%s> row %d"), name, row);
    */
	/* lower than min?  */
	/*
    for (col = 0; col < ncols; col++) 
	  {
	    f = ((FCELL *) inrast)[col];
	    if ((double)f < min_elev)
	      min_elev = (double)f;

	  }
	
    }
	*/

    

    /* ERICSSON */

    /* for each row */
    for (row = 0; row < nrows; row++) {
      FCELL f, f2;

	if (verbose)
	    G_percent(row, nrows, 2);

	/* read input map */
	if (G_get_raster_row(infd, inrast, row, FCELL_TYPE) < 0)
	  G_fatal_error(_("Unable to read raster map <%s> row %d"), name, row);

	/* read input map 2 */
	if (G_get_raster_row(infd2, inrast2, row, FCELL_TYPE) < 0)
	  G_fatal_error(_("Unable to read raster map <%s> row %d"), name2, row);
 
	/* process the data */
	for (col = 0; col < ncols; col++) 
	  { 
	    f = ((FCELL *) inrast)[col];
	    f2 = ((FCELL *) inrast2)[col];


	    f = calc_ericsson(f, f2, east, north, trans_total_height, col, row, frequency, window, name, infd, outfile);/*calculate ericsson  */
	
	    ((FCELL *) outrast)[col] = f;
	  }
	
	/* write raster row to output raster map */
	if (G_put_raster_row(outfd, outrast, FCELL_TYPE) < 0)
	    G_fatal_error(_("Failed writing raster map <%s>"), result);
    }

    /* memory cleanup */
    G_free(inrast);
    G_free(inrast2);
    G_free(outrast);

    /* closing raster maps */
    G_close_cell(infd);
    G_close_cell(infd2);
    G_close_cell(outfd);

	fclose(fp);

    /* add command line incantation to history file */
    G_short_history(result, "raster", &history);
    G_command_history(&history);
    G_write_history(result, &history);


    exit(EXIT_SUCCESS);
}
