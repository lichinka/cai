Agent behaviour is as follows:

    + Movement is random, generally non-contiguous. A CPU randomly-generated number is used as random seed.
    + If the current location is under coverage, an agent shall lower the pilot power of a 
      randomly-selected the transmitter. This random selection is uniformly distributed, and potentially 
      includes the best server at a given coordinate. 
    + Agents know whether the current solution is valid or not (i.e. whether full coverage has been achieved).
      If full coverage has not yet been achieved, a configurable portion of "special" agents (here 50%, i.e.
      agents with even ID) will randomly select one uncovered location from a list of all uncovered pixels 
      received living in global memory, and strictly raise pilot powers there. They shall raise the pilot
      power of the transmitter with the lowest path-loss value on the current location. This is (on average)
      the nearest transmitter. Meanwhile, the other half of agents shall work as usual, i.e. lowering pilot 
      power where the coordinate is covered, and raising it otherwise.
    + Implementation is on GPU, launching one thread block only, containing as many threads as there are agents.
    + The thread block is organized in a 1D grid.
    + Agent's signal analysis is saved in shared memory, containing the transmitter ID at position 2*threadId, 
      and the new pilot power at position 2*threadId+1. Both numbers are unsigned shorts.
